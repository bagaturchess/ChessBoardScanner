package bagaturchess.scanner.machinelearning.dataset;


import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

import bagaturchess.bitboard.impl.utils.VarStatistic;
import bagaturchess.scanner.common.BoardProperties;
import bagaturchess.scanner.common.Color;
import bagaturchess.scanner.common.MatrixUtils;
import bagaturchess.scanner.common.ResultPair;
import bagaturchess.scanner.patterns.api.ImageHandlerSingleton;
import bagaturchess.scanner.utils.ScannerUtils;


public class DatasetGenerator_ByPiecesSetAndSquareColor {
	
	
	public static void main(String[] args) {
		
		try {
			
			String[] inputFiles = new String[] {
					/*"./res/cnn/chess.com/set1/input1.png",
					"./res/cnn/chess.com/set1/input2.png",
					"./res/cnn/chess.com/set1/input3.png",
					"./res/cnn/chess.com/set1/input4.png",
					"./res/cnn/chess.com/set1/input5.png",
					"./res/cnn/chess.com/set1/input6.png",
					"./res/cnn/chess.com/set1/input7.png",
					"./res/cnn/chess.com/set1/input8.png",
					"./res/cnn/chess.com/set1/input9.png",
					"./res/cnn/chess.com/set1/input10.png",*/
					
					/*"./res/cnn/lichess.org/set1/input1.png",
					"./res/cnn/lichess.org/set1/input2.png",
					"./res/cnn/lichess.org/set1/input3.png",
					"./res/cnn/lichess.org/set1/input4.png",
					"./res/cnn/lichess.org/set1/input5.png",
					"./res/cnn/lichess.org/set1/input6.png",
					"./res/cnn/lichess.org/set1/input7.png",
					"./res/cnn/lichess.org/set1/input8.png",
					"./res/cnn/lichess.org/set1/input9.png",
					"./res/cnn/lichess.org/set1/input10.png",*/
					
					/*"./res/cnn/chess24.com/set1/input1.png",
					"./res/cnn/chess24.com/set1/input2.png",
					"./res/cnn/chess24.com/set1/input3.png",
					"./res/cnn/chess24.com/set1/input4.png",
					"./res/cnn/chess24.com/set1/input5.png",
					"./res/cnn/chess24.com/set1/input6.png",
					"./res/cnn/chess24.com/set1/input7.png",
					"./res/cnn/chess24.com/set1/input8.png",
					"./res/cnn/chess24.com/set1/input9.png",
					"./res/cnn/chess24.com/set1/input10.png",
					"./res/cnn/chess24.com/set1/input11.png",*/
					
					"./res/cnn/books/set1/input1.png",
					"./res/cnn/books/set1/input2.png",
					"./res/cnn/books/set1/input3.png",
					"./res/cnn/books/set1/input4.png",
					"./res/cnn/books/set1/input5.png",
					"./res/cnn/books/set1/input6.png",
					"./res/cnn/books/set1/input7.png",
					"./res/cnn/books/set1/input8.png",
					"./res/cnn/books/set1/input9.png",
					"./res/cnn/books/set1/input10.png",
					"./res/cnn/books/set1/input11.png",
				};
			
			
			VarStatistic mean_light_red = new VarStatistic(false);
			VarStatistic mean_light_green = new VarStatistic(false);
			VarStatistic mean_light_blue = new VarStatistic(false);
			
			VarStatistic mean_dark_red = new VarStatistic(false);
			VarStatistic mean_dark_green = new VarStatistic(false);
			VarStatistic mean_dark_blue = new VarStatistic(false);
			
			for (int i = 0; i < inputFiles.length; i++) {
				
				BufferedImage image = (BufferedImage) ImageHandlerSingleton.getInstance().loadImageFromFS(inputFiles[i]);
				int[][][] rgbBoard = ScannerUtils.convertToRGBMatrix(image);
				ResultPair<Color, Color> squareColors = MatrixUtils.getSquaresColor_RGB(rgbBoard);
				
				mean_light_red.addValue(squareColors.getFirst().red, squareColors.getFirst().red);
				mean_light_green.addValue(squareColors.getFirst().green, squareColors.getFirst().green);
				mean_light_blue.addValue(squareColors.getFirst().blue, squareColors.getFirst().blue);
				
				mean_dark_red.addValue(squareColors.getSecond().red, squareColors.getSecond().red);
				mean_dark_green.addValue(squareColors.getSecond().green, squareColors.getSecond().green);
				mean_dark_blue.addValue(squareColors.getSecond().blue, squareColors.getSecond().blue);
			}
			
			Color lightSquare = new Color((int) mean_light_red.getEntropy(), (int) mean_light_green.getEntropy(), (int) mean_light_blue.getEntropy());
			Color darkSquare = new Color((int) mean_dark_red.getEntropy(), (int) mean_dark_green.getEntropy(), (int) mean_dark_blue.getEntropy());
			
			BoardProperties boardProperties = new BoardProperties(256, "set4");
			DataSetInitPair pairs = DataSetUtils.getAutoGeneratedPairs_RGB(boardProperties, lightSquare, darkSquare, "./datasets_deepnetts/dataset_books_set_1_autogen/");
	        
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
